/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package jp.ncsa.dx;

import jp.ncsa.dx.batch.SweepProcess;
import jp.ncsa.dx.type.BatchExecuteResultTypes;
import jp.ncsa.dx.type.ExecuteBatchTypes;

/**
 * 
 * バッチ実行クラス
 *
 */
public class BatchExecutor {

	/** バッチ実行引数の要素番号 */
	private static final int ELEMENT_NUMBER_EXE_BATCH = 0;

	/**
	 * バッチ実行
	 * 
	 * @param args 第１引数：実行バッチ 第２引数以降：各クラスでの必要引数
	 */
	public static void main(String[] args) {

		// TODO ログファイルに出力する。
		System.out.println("指定されたバッチの実行処理を開始します。");
		// 実行時の引数数を出力する
		for (int i = 0; i < args.length; i++) {
			// TODO ログファイルに出力する。
			System.out.println("引数" + i + "：" + args[i]);
		}
		try {

			/** 事前処理 */
			// TODO ログファイルに出力する。
			System.out.println("入力された引数のチェック処理を開始します。");
			// 入力された引数が適切であるかチェックする。
			boolean checkArgs = checkArgs(args);
			// TODO ログファイルに出力する。
			System.out.println("入力された引数のチェック処理を終了します。");

			// チェック結果がNGの場合
			if (!checkArgs) {
				// エラー終了する。
				errorFin();

			}

			/** 主処理 */
			// 指定したバッチを場合を実行する。
			BatchExecuteResultTypes executeResult = execute(args);

			/** 終了処理 */
			// TODO ログファイルに出力する。
			System.out.println("指定されたバッチの実行処理を終了します。実行結果=" + executeResult);

			// バッチの実行結果状態で処理を終了する。
			System.exit(executeResult.getCode());

		} catch (Throwable e) {
			// TODO ログファイルに出力する。
			System.out.println("想定外のエラーが発生しました。");
			// TODO ログファイルに出力
			e.printStackTrace();
			// エラー終了する。
			errorFin();
		}
	}

	/**
	 * 実行時の引数をチェックする。
	 * 
	 * @param args 実行時引数
	 * @return チェック結果(true:正常 false:不正)
	 */
	private static boolean checkArgs(String[] args) {

		// 実行クラスが指定されていない場合
		if (args == null || args.length == 0) {

			// TODO ログファイルに出力する。
			System.out.println("第１引数に実行するバッチを指定して実行してください。");

			// チェック結果：異常
			return false;
		}

		// 指定したバッチが存在するかチェックする。
		boolean existsBatch = existsBatch(args[ELEMENT_NUMBER_EXE_BATCH]);

		// 指定したバッチが存在しない場合
		if (!existsBatch) {
			// TODO ログファイルに出力する。
			System.out.println("第１引数に指定したバッチが存在しません。バッチ=" + args[ELEMENT_NUMBER_EXE_BATCH]);
			// チェック結果：異常
			return false;
		}

		// 指定したバッチの引数の数が適切かチェックする。
		// バッチのEnumクラスを取得
		ExecuteBatchTypes dxBatchTypes = ExecuteBatchTypes.valueOf(args[ELEMENT_NUMBER_EXE_BATCH]);

		// 実行引数の数が適切かチェックする。
		// 実行引数の数が一致する場合:true それ以外：false。
		boolean checkArgsQtty = args.length == dxBatchTypes.getArgsQty() ? true : false;

		// 指定したバッチの引数の数が不適切な場合
		if (!checkArgsQtty) {

			// TODO ログファイルに出力する。
			System.out.println("想定している引数の数が異なります。想定数＝" + dxBatchTypes.getArgsQty() + " 指定数＝" + args.length);
			// チェック結果：異常
			return false;
		}

		// チェック結果：正常
		return true;

	}

	/**
	 * 指定されたバッチを実行する。
	 * 
	 * @param args 実行時引数
	 * @return 実行結果
	 */
	private static BatchExecuteResultTypes execute(String[] args) {

		// バッチ実行結果
		BatchExecuteResultTypes executeResult = BatchExecuteResultTypes.ERROR;

		// TODO ログファイルに出力する。
		System.out.println("主処理を開始します。バッチ＝" + args[ELEMENT_NUMBER_EXE_BATCH]);

		/** 主処理 */
		// 実行クラス：SweepData
		if (args[ELEMENT_NUMBER_EXE_BATCH].equals(ExecuteBatchTypes.SWEEP_PROCESS.name())) {

			// ステータス出力を実行する
			executeResult = new SweepProcess().execute(args[1]);
		}

		// TODO ログファイルに出力する。
		System.out.println("主処理を終了します。バッチ＝" + args[ELEMENT_NUMBER_EXE_BATCH] + " 実行結果＝" + executeResult);

		// 実行結果を戻す。
		return executeResult;

	}

	/**
	 * バッチが存在するかチェックする。
	 * 
	 * @param batchName
	 * @return 存在チェック結果(true:存在 false:未存在)
	 */
	private static boolean existsBatch(String batchName) {
		// 引数に指定したバッチの存在チェック
		try {
			ExecuteBatchTypes.valueOf(batchName);
			return true;

		} catch (IllegalArgumentException e) {
			return false;
		}

	}

	/**
	 * エラー終了
	 */
	private static void errorFin() {
		// TODO ログファイルに出力する。
		System.out.println("指定されたバッチの実行処理を終了します。実行結果=" + BatchExecuteResultTypes.ERROR);
		// 異常終了
		System.exit(BatchExecuteResultTypes.ERROR.getCode());

	}

}